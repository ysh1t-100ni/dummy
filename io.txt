import java.io.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.logging.*;

public class FileIOUtils {

    private static final Logger logger = Logger.getLogger(FileIOUtils.class.getName());

    // Read the contents of a file as a String
    public static String readFileAsString(String filePath) {
        try {
            return new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error reading file: " + filePath, e);
            return null;
        }
    }

    // Write a String to a file (overwrites the file if it exists)
    public static void writeFile(String filePath, String content) {
        try {
            Files.write(Paths.get(filePath), content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error writing to file: " + filePath, e);
        }
    }

    // Append content to a file (if the file exists, the content will be appended)
    public static void appendToFile(String filePath, String content) {
        try {
            Files.write(Paths.get(filePath), content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error appending to file: " + filePath, e);
        }
    }

    // Read the contents of a file into a List of Strings (line by line)
    public static List<String> readFileAsLines(String filePath) {
        try {
            return Files.readAllLines(Paths.get(filePath), StandardCharsets.UTF_8);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error reading file as lines: " + filePath, e);
            return null;
        }
    }

    // Write a List of Strings to a file (overwrites the file if it exists)
    public static void writeLinesToFile(String filePath, List<String> lines) {
        try {
            Files.write(Paths.get(filePath), lines, StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error writing lines to file: " + filePath, e);
        }
    }

    // Check if a file or directory exists
    public static boolean fileExists(String filePath) {
        try {
            return Files.exists(Paths.get(filePath));
        } catch (SecurityException e) {
            logger.log(Level.SEVERE, "Permission denied when checking if file exists: " + filePath, e);
            return false;
        }
    }

    // Create a directory if it does not exist
    public static void createDirectory(String dirPath) {
        try {
            Path path = Paths.get(dirPath);
            if (!Files.exists(path)) {
                Files.createDirectories(path);
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error creating directory: " + dirPath, e);
        }
    }

    // Delete a file or directory (recursively for directories)
    public static void deleteFile(String filePath) {
        try {
            Path path = Paths.get(filePath);
            if (Files.exists(path)) {
                if (Files.isDirectory(path)) {
                    Files.walk(path)
                            .sorted((p1, p2) -> p2.compareTo(p1)) // Sort in reverse order to delete child files first
                            .forEach(p -> {
                                try {
                                    Files.delete(p);
                                } catch (IOException e) {
                                    logger.log(Level.SEVERE, "Error deleting file: " + p, e);
                                }
                            });
                } else {
                    Files.delete(path);
                }
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error deleting file or directory: " + filePath, e);
        }
    }

    // Copy a file from source to destination
    public static void copyFile(String sourcePath, String destinationPath) {
        try {
            Path source = Paths.get(sourcePath);
            Path destination = Paths.get(destinationPath);
            Files.copy(source, destination, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error copying file from " + sourcePath + " to " + destinationPath, e);
        }
    }

    // Move a file from source to destination
    public static void moveFile(String sourcePath, String destinationPath) {
        try {
            Path source = Paths.get(sourcePath);
            Path destination = Paths.get(destinationPath);
            Files.move(source, destination, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error moving file from " + sourcePath + " to " + destinationPath, e);
        }
    }

    // Get the file extension
    public static String getFileExtension(String filePath) {
        try {
            Path path = Paths.get(filePath);
            String fileName = path.getFileName().toString();
            int lastIndexOfDot = fileName.lastIndexOf('.');
            if (lastIndexOfDot == -1) {
                return ""; // No extension
            }
            return fileName.substring(lastIndexOfDot + 1);
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error extracting file extension from: " + filePath, e);
            return "";
        }
    }

    // Get the file name without extension
    public static String getFileNameWithoutExtension(String filePath) {
        try {
            Path path = Paths.get(filePath);
            String fileName = path.getFileName().toString();
            int lastIndexOfDot = fileName.lastIndexOf('.');
            if (lastIndexOfDot == -1) {
                return fileName; // No extension
            }
            return fileName.substring(0, lastIndexOfDot);
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error extracting file name without extension from: " + filePath, e);
            return "";
        }
    }
}
